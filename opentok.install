<?php

function opentok_schema() {
  $schema['opentok_connection'] = array(
    'fields' => array(
      'connection_id' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'creation_time' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('connection_id'),
  );
  return $schema;
}

function opentok_install() {
  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  // We define the node type as an associative array.
  $opentok_conference = array(
    'type' => 'opentok_conference',
    'name' => $t('Opentok Conference'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('This is the Opentok Conference Content type'),
    'title_label' => $t('Title'),
	'custom' => TRUE,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($opentok_conference);

  //We add a body field and set the body label immediately.
  node_add_body_field($content_type, $t('Description of the Conference'));



  // Save the content type
  node_type_save($content_type);


  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_opentok_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_opentok_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $opentok_conference['type'];
    field_create_instance($instance);
  }
  drupal_set_message($message = t('OpenTok moudle was successfully installed. Now please add an "OpenTok Session" field to the "Opentok Conference" content type and start enjoying the module.'), $type = 'status');
}
/**
 * Implements hook_uninstall().
 *
 * This hook is called when the user not only has disabled the module,
 * but also uninstalls it from the 'uninstall' tab in the module page.
 *
 * So it's a perfect time to remove our fields and instances and new
 * node type from the database.
 *
 * @ingroup opentok
 */
function opentok_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'opentok_conference'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_opentok_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the node_example
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'opentok_conference');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('opentok_conference');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * opentok_install() and opentok_uninstall().
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup opentok
 */
function _opentok_installed_fields() {
  $t = get_t();
  return array(
    'opentok_conference_date' => array(
      'field_name' => 'opentok_conference_date',
      'cardinality' => 1,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 40,
      ),
    ),
    'opentok_conference_time' => array(
      'field_name'  => 'opentok_conference_time',
      'cardinality' => 1,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 20,
      ),
    ),
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_example_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is factored into this function so it can be used in both
 * opentok_install() and opentok_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 * @ingroup opentok
 */
function _opentok_installed_instances() {
  $t = get_t();
  return array(
    'opentok_conference_date' => array(
      'field_name' => 'opentok_conference_date',
      'label'       => $t('The date of the conference'),
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
    'opentok_conference_time' => array(
      'field_name'  => 'opentok_conference_time',
      'label' => $t('The time of the conference (please also include the time zone)'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
  );
}

function opentok_enable() {
	$fds = "gra";	
}